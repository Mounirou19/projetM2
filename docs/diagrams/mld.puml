@startuml MLD - CinéManga

!theme aws-orange
title Modèle Logique de Données - CinéManga

' Tables principales
class users {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    lastname : VARCHAR(255) NOT NULL
    firstname : VARCHAR(255) NOT NULL
    email : VARCHAR(255) UNIQUE NOT NULL
    password : VARCHAR(255) NOT NULL
    role : VARCHAR(255) NOT NULL DEFAULT 'ROLE_USER'
    status : BOOLEAN NOT NULL DEFAULT true
    --
    created_at : TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    updated_at : TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    --
    INDEX idx_email (email)
    INDEX idx_role (role)
    INDEX idx_status (status)
}

class medias {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    title : VARCHAR(255) NOT NULL
    type : VARCHAR(255) NOT NULL
    image_url : VARCHAR(255)
    description : TEXT
    status : BOOLEAN NOT NULL DEFAULT true
    score : INT DEFAULT 0
    --
    created_at : TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    updated_at : TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    --
    INDEX idx_type (type)
    INDEX idx_status (status)
    INDEX idx_score (score)
    INDEX idx_title (title)
    UNIQUE KEY uk_title_type (title, type)
}

class profils {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    id_user : INT NOT NULL
    id_media : INT NOT NULL
    --
    created_at : TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    --
    FOREIGN KEY fk_profil_user (id_user) REFERENCES users(id) ON DELETE CASCADE
    FOREIGN KEY fk_profil_media (id_media) REFERENCES medias(id) ON DELETE CASCADE
    UNIQUE KEY uk_user_media (id_user, id_media)
}

class contacts {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    name : VARCHAR(255) NOT NULL
    email : VARCHAR(255) NOT NULL
    subject : VARCHAR(255) NOT NULL
    message : TEXT NOT NULL
    created_at : TIMESTAMP NOT NULL
    status : BOOLEAN NOT NULL DEFAULT true
    --
    INDEX idx_status (status)
    INDEX idx_created_at (created_at)
    INDEX idx_email (email)
}

' Tables d'extension (futures améliorations)
class genres {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    name : VARCHAR(255) UNIQUE NOT NULL
    description : TEXT
    media_type : VARCHAR(255)
    --
    INDEX idx_media_type (media_type)
}

class media_genres {
    + media_id : INT NOT NULL
    + genre_id : INT NOT NULL
    --
    PRIMARY KEY (media_id, genre_id)
    FOREIGN KEY fk_mg_media (media_id) REFERENCES medias(id) ON DELETE CASCADE
    FOREIGN KEY fk_mg_genre (genre_id) REFERENCES genres(id) ON DELETE CASCADE
}

class ratings {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    user_id : INT NOT NULL
    media_id : INT NOT NULL
    rating : INT NOT NULL CHECK (rating >= 1 AND rating <= 10)
    comment : TEXT
    created_at : TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    --
    FOREIGN KEY fk_rating_user (user_id) REFERENCES users(id) ON DELETE CASCADE
    FOREIGN KEY fk_rating_media (media_id) REFERENCES medias(id) ON DELETE CASCADE
    UNIQUE KEY uk_user_media_rating (user_id, media_id)
    INDEX idx_rating (rating)
    INDEX idx_created_at (created_at)
}

class categories {
    + id : INT PRIMARY KEY AUTO_INCREMENT
    --
    name : VARCHAR(255) UNIQUE NOT NULL
    description : TEXT
    media_type : VARCHAR(255)
    sort_order : INT DEFAULT 0
    --
    INDEX idx_media_type (media_type)
    INDEX idx_sort_order (sort_order)
}

class media_categories {
    + media_id : INT NOT NULL
    + category_id : INT NOT NULL
    --
    PRIMARY KEY (media_id, category_id)
    FOREIGN KEY fk_mc_media (media_id) REFERENCES medias(id) ON DELETE CASCADE
    FOREIGN KEY fk_mc_category (category_id) REFERENCES categories(id) ON DELETE CASCADE
}

' Relations existantes
users ||--o{ profils : "1:N"
medias ||--o{ profils : "1:N"

' Relations futures
users ||--o{ ratings : "1:N"
medias ||--o{ ratings : "1:N"
medias ||--o{ media_genres : "1:N"
genres ||--o{ media_genres : "1:N"
medias ||--o{ media_categories : "1:N"
categories ||--o{ media_categories : "1:N"

' Contraintes et optimisations
note top of users
  <b>CONTRAINTES:</b>
  - email UNIQUE pour l'authentification
  - password haché (bcrypt, 255 chars min)
  - role ∈ {'ROLE_USER', 'ROLE_ADMIN'}
  
  <b>OPTIMISATIONS:</b>
  - Index sur email (recherche login)
  - Index sur role (filtrage admin)
  - Index sur status (utilisateurs actifs)
end note

note top of medias
  <b>CONTRAINTES:</b>
  - type ∈ {'film', 'serie', 'manga'}
  - score calculé automatiquement
  - Unicité titre+type
  
  <b>OPTIMISATIONS:</b>
  - Index composé sur type+status
  - Index sur score (tri/filtrage)
  - Full-text index sur title+description
end note

note right of profils
  <b>TABLE DE LIAISON:</b>
  - Gère les favoris utilisateurs
  - Contrainte d'unicité user+media
  - Suppression en cascade
  
  <b>OPTIMISATIONS:</b>
  - Index composé sur user_id+media_id
  - Partitioning possible par user_id
end note

note bottom of ratings
  <b>SYSTÈME DE NOTATION:</b>
  - Note de 1 à 10 obligatoire
  - Commentaire optionnel
  - Une seule note par user/media
  
  <b>TRIGGER REQUIS:</b>
  - Mise à jour du score média
    après INSERT/UPDATE/DELETE
end note

note left of contacts
  <b>SYSTÈME DE CONTACT:</b>
  - Indépendant des utilisateurs
  - status: true=non lu, false=traité
  
  <b>OPTIMISATIONS:</b>
  - Index sur status (messages non lus)
  - Index sur created_at (tri chronologique)
end note

' Scripts de création
note as SCRIPTS
  <b>SCRIPTS SQL RECOMMANDÉS:</b>
  
  <b>1. Triggers pour le score:</b>
  ```sql
  DELIMITER $$
  CREATE TRIGGER update_media_score
  AFTER INSERT ON ratings FOR EACH ROW
  BEGIN
    UPDATE medias SET score = (
      SELECT AVG(rating) FROM ratings 
      WHERE media_id = NEW.media_id
    ) WHERE id = NEW.media_id;
  END$$
  ```
  
  <b>2. Vues utiles:</b>
  ```sql
  CREATE VIEW v_media_stats AS
  SELECT m.*, COUNT(r.id) as total_ratings,
         AVG(r.rating) as avg_rating
  FROM medias m
  LEFT JOIN ratings r ON m.id = r.media_id
  GROUP BY m.id;
  ```
  
  <b>3. Procédures de maintenance:</b>
  - Nettoyage des sessions expirées
  - Recalcul des scores de masse
  - Archivage des anciens contacts
end note

@enduml
